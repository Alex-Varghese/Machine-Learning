# -*- coding: utf-8 -*-
"""Copy of Copy of Team_23(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uAhp8TGRED1mDDKx78T7dtawF9dkvYeh

# ML for pregnancy risk

## Importing libraries
"""

import pandas as pd
import numpy as np

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import log_loss, roc_auc_score, recall_score, precision_score, average_precision_score, f1_score, classification_report, accuracy_score, plot_roc_curve, plot_precision_recall_curve, plot_confusion_matrix
from sklearn.tree import DecisionTreeRegressor

"""## Cleaning the data"""

df = pd.read_csv('https://raw.githubusercontent.com/Ashokdsa/Maternal-health-risk/main/Maternal%20Health%20Risk%20Data%20Set.csv', na_values='?')
df

df.columns

df = df.rename(columns={'RiskLevel': 'target'})

df['target'].value_counts(dropna=False)

df.info()

"""### Seperating of variables"""

y = df['target']
y

X = df.drop('target', axis=1)
X

"""### Making test and train variables to test our regression statements"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)
X_train

X_test

"""## Model Implementation

## Linear regression
"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(X_train, y_train)

"""### Applying the prediction model"""

y_lr_train_pred = lr.predict(X_train)
y_lr_test_pred = lr.predict(X_test)

y_lr_train_pred

y_lr_test_pred

"""### Evaluating the model's performance"""

from sklearn.metrics import mean_squared_error, r2_score

lr_train_mse = mean_squared_error(y_train, y_lr_train_pred)
lr_train_r2 = r2_score(y_train, y_lr_train_pred)

lr_test_mse = mean_squared_error(y_test, y_lr_test_pred)
lr_test_r2 = r2_score(y_test, y_lr_test_pred)

print('Linear Mean Sqaured Error (Train): ', lr_train_mse)
print('Linear R2 (Train): ', lr_train_r2)
print('Linear Mean Sqaured Error (Test): ', lr_test_mse)
print('Linear R2 (Test): ', lr_test_r2)

"""### Making a new dataframe to hold the accuracy of the values of different models"""

lr_results = pd.DataFrame(['Linear regression', lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]).transpose()
lr_results.columns = ['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2']
lr_results

"""## Random Forest Regression"""

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(max_depth=2, random_state=100)
rf.fit(X_train, y_train)

"""### Applying the model"""

y_rf_train_pred = rf.predict(X_train)
y_rf_test_pred = rf.predict(X_test)

"""### Accuracy of the model"""

rf_train_mse = mean_squared_error(y_train, y_rf_train_pred)
rf_train_r2 = r2_score(y_train, y_rf_train_pred)

rf_test_mse = mean_squared_error(y_test, y_rf_test_pred)
rf_test_r2 = r2_score(y_test, y_rf_test_pred)

rf_results = pd.DataFrame(['Random forest', rf_train_mse, rf_train_r2, rf_test_mse, rf_test_r2]).transpose()
rf_results.columns = ['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2']
rf_results

"""## Decision tree"""

import sys
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib import pyplot as plt
from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree

"""### Applying model"""

X = df.drop('BS', axis=1)

dt = DecisionTreeRegressor(random_state=0)
dt = dt.fit(X_train, y_train)

"""### Accuracy of the model"""

y_dt_train_pred = dt.predict(X_train)
y_dt_test_pred = dt.predict(X_test)
dt_train_mse = mean_squared_error(y_train, y_dt_train_pred)
dt_train_r2 = r2_score(y_train, y_dt_train_pred)

dt_test_mse = mean_squared_error(y_test, y_dt_test_pred)
dt_test_r2 = r2_score(y_test, y_dt_test_pred)

dt_results = pd.DataFrame(['Decision Tree', dt_train_mse, dt_train_r2, dt_test_mse, dt_test_r2]).transpose()
dt_results.columns = ['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2']
dt_results

"""## Comparing the two models"""

df_models = pd.concat([lr_results, rf_results,dt_results], axis=0)
df_models

df_models.reset_index(drop=True)

"""### Data visualization using graphs"""

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(5,5))
plt.scatter(x=y_train, y=y_dt_train_pred, c="#7CAE00" ,alpha=0.3)

z = np.polyfit(y_train, y_dt_train_pred,1)
p = np.poly1d(z)

plt.plot(y_train, p(y_train), '#F8766D')
plt.ylabel('Predict target')
plt.xlabel('Experimental target')

"""## Input module"""

input_data = (20,120,75,7.01,100,70)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction=dt.predict(input_data_reshaped)
if (prediction== 0):

  print("The pregnant patient is at low risk")

elif (prediction==1):

  print('The pregnant patient is at high risk')

else:

  print('The pregnant patient is at medium risk')

prediction